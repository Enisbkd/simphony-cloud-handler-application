package mc.sbm.simphonycloud.domain;

import static mc.sbm.simphonycloud.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class FactureEnTeteAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactureEnTeteAllPropertiesEquals(FactureEnTete expected, FactureEnTete actual) {
        assertFactureEnTeteAutoGeneratedPropertiesEquals(expected, actual);
        assertFactureEnTeteAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactureEnTeteAllUpdatablePropertiesEquals(FactureEnTete expected, FactureEnTete actual) {
        assertFactureEnTeteUpdatableFieldsEquals(expected, actual);
        assertFactureEnTeteUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactureEnTeteAutoGeneratedPropertiesEquals(FactureEnTete expected, FactureEnTete actual) {
        assertThat(actual)
            .as("Verify FactureEnTete auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactureEnTeteUpdatableFieldsEquals(FactureEnTete expected, FactureEnTete actual) {
        assertThat(actual)
            .as("Verify FactureEnTete relevant properties")
            .satisfies(a -> assertThat(a.getNum()).as("check num").isEqualTo(expected.getNum()))
            .satisfies(a -> assertThat(a.getFactureRef()).as("check factureRef").isEqualTo(expected.getFactureRef()))
            .satisfies(a ->
                assertThat(a.getOuvertureDateTime())
                    .as("check ouvertureDateTime")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getOuvertureDateTime())
            )
            .satisfies(a ->
                assertThat(a.getFermetureDateTime())
                    .as("check fermetureDateTime")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getFermetureDateTime())
            )
            .satisfies(a -> assertThat(a.getEstAnnule()).as("check estAnnule").isEqualTo(expected.getEstAnnule()))
            .satisfies(a -> assertThat(a.getNbrePax()).as("check nbrePax").isEqualTo(expected.getNbrePax()))
            .satisfies(a -> assertThat(a.getNumTable()).as("check numTable").isEqualTo(expected.getNumTable()))
            .satisfies(a -> assertThat(a.getTaxeMontantTotal()).as("check taxeMontantTotal").isEqualTo(expected.getTaxeMontantTotal()))
            .satisfies(a -> assertThat(a.getSousTotal()).as("check sousTotal").isEqualTo(expected.getSousTotal()))
            .satisfies(a -> assertThat(a.getFactureTotal()).as("check factureTotal").isEqualTo(expected.getFactureTotal()))
            .satisfies(a -> assertThat(a.getCommissionTotal()).as("check commissionTotal").isEqualTo(expected.getCommissionTotal()))
            .satisfies(a -> assertThat(a.getTipTotal()).as("check tipTotal").isEqualTo(expected.getTipTotal()))
            .satisfies(a -> assertThat(a.getRemiseTotal()).as("check remiseTotal").isEqualTo(expected.getRemiseTotal()))
            .satisfies(a ->
                assertThat(a.getErreursCorrigeesTotal()).as("check erreursCorrigeesTotal").isEqualTo(expected.getErreursCorrigeesTotal())
            )
            .satisfies(a -> assertThat(a.getRetourTotal()).as("check retourTotal").isEqualTo(expected.getRetourTotal()))
            .satisfies(a ->
                assertThat(a.getXferToFactureEnTeteRef()).as("check xferToFactureEnTeteRef").isEqualTo(expected.getXferToFactureEnTeteRef())
            )
            .satisfies(a -> assertThat(a.getXferStatus()).as("check xferStatus").isEqualTo(expected.getXferStatus()))
            .satisfies(a ->
                assertThat(a.getCategoriePointDeVenteRef())
                    .as("check categoriePointDeVenteRef")
                    .isEqualTo(expected.getCategoriePointDeVenteRef())
            )
            .satisfies(a -> assertThat(a.getPointDeVenteRef()).as("check pointDeVenteRef").isEqualTo(expected.getPointDeVenteRef()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactureEnTeteUpdatableRelationshipsEquals(FactureEnTete expected, FactureEnTete actual) {
        // empty method
    }
}
