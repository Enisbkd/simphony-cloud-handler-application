package mc.sbm.simphonycloud.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PointDeVenteAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPointDeVenteAllPropertiesEquals(PointDeVente expected, PointDeVente actual) {
        assertPointDeVenteAutoGeneratedPropertiesEquals(expected, actual);
        assertPointDeVenteAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPointDeVenteAllUpdatablePropertiesEquals(PointDeVente expected, PointDeVente actual) {
        assertPointDeVenteUpdatableFieldsEquals(expected, actual);
        assertPointDeVenteUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPointDeVenteAutoGeneratedPropertiesEquals(PointDeVente expected, PointDeVente actual) {
        assertThat(actual)
            .as("Verify PointDeVente auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPointDeVenteUpdatableFieldsEquals(PointDeVente expected, PointDeVente actual) {
        assertThat(actual)
            .as("Verify PointDeVente relevant properties")
            .satisfies(a -> assertThat(a.getNom()).as("check nom").isEqualTo(expected.getNom()))
            .satisfies(a -> assertThat(a.getNomCourt()).as("check nomCourt").isEqualTo(expected.getNomCourt()))
            .satisfies(a -> assertThat(a.getEstActif()).as("check estActif").isEqualTo(expected.getEstActif()))
            .satisfies(a -> assertThat(a.getEtablissementRef()).as("check etablissementRef").isEqualTo(expected.getEtablissementRef()))
            .satisfies(a -> assertThat(a.getHierRef()).as("check hierRef").isEqualTo(expected.getHierRef()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPointDeVenteUpdatableRelationshipsEquals(PointDeVente expected, PointDeVente actual) {
        // empty method
    }
}
