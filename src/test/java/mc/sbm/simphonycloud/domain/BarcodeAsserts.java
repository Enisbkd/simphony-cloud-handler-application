package mc.sbm.simphonycloud.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BarcodeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBarcodeAllPropertiesEquals(Barcode expected, Barcode actual) {
        assertBarcodeAutoGeneratedPropertiesEquals(expected, actual);
        assertBarcodeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBarcodeAllUpdatablePropertiesEquals(Barcode expected, Barcode actual) {
        assertBarcodeUpdatableFieldsEquals(expected, actual);
        assertBarcodeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBarcodeAutoGeneratedPropertiesEquals(Barcode expected, Barcode actual) {
        assertThat(actual)
            .as("Verify Barcode auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBarcodeUpdatableFieldsEquals(Barcode expected, Barcode actual) {
        assertThat(actual)
            .as("Verify Barcode relevant properties")
            .satisfies(a -> assertThat(a.getNum()).as("check num").isEqualTo(expected.getNum()))
            .satisfies(a -> assertThat(a.getBarcode()).as("check barcode").isEqualTo(expected.getBarcode()))
            .satisfies(a -> assertThat(a.getPrix()).as("check prix").isEqualTo(expected.getPrix()))
            .satisfies(a -> assertThat(a.getCoutPreparation()).as("check coutPreparation").isEqualTo(expected.getCoutPreparation()))
            .satisfies(a -> assertThat(a.getDefNumSequence()).as("check defNumSequence").isEqualTo(expected.getDefNumSequence()))
            .satisfies(a -> assertThat(a.getPrixNumSequence()).as("check prixNumSequence").isEqualTo(expected.getPrixNumSequence()))
            .satisfies(a -> assertThat(a.getPointDeVenteRef()).as("check pointDeVenteRef").isEqualTo(expected.getPointDeVenteRef()))
            .satisfies(a -> assertThat(a.getElementMenuRef()).as("check elementMenuRef").isEqualTo(expected.getElementMenuRef()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBarcodeUpdatableRelationshipsEquals(Barcode expected, Barcode actual) {
        // empty method
    }
}
