package mc.sbm.simphonycloud.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FactureDetailAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactureDetailAllPropertiesEquals(FactureDetail expected, FactureDetail actual) {
        assertFactureDetailAutoGeneratedPropertiesEquals(expected, actual);
        assertFactureDetailAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactureDetailAllUpdatablePropertiesEquals(FactureDetail expected, FactureDetail actual) {
        assertFactureDetailUpdatableFieldsEquals(expected, actual);
        assertFactureDetailUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactureDetailAutoGeneratedPropertiesEquals(FactureDetail expected, FactureDetail actual) {
        assertThat(actual)
            .as("Verify FactureDetail auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactureDetailUpdatableFieldsEquals(FactureDetail expected, FactureDetail actual) {
        assertThat(actual)
            .as("Verify FactureDetail relevant properties")
            .satisfies(a -> assertThat(a.getFactureEnTeteRef()).as("check factureEnTeteRef").isEqualTo(expected.getFactureEnTeteRef()))
            .satisfies(a -> assertThat(a.getNumLigne()).as("check numLigne").isEqualTo(expected.getNumLigne()))
            .satisfies(a -> assertThat(a.getDetailType()).as("check detailType").isEqualTo(expected.getDetailType()))
            .satisfies(a -> assertThat(a.getUtcDateTime()).as("check utcDateTime").isEqualTo(expected.getUtcDateTime()))
            .satisfies(a -> assertThat(a.getLclDateTime()).as("check lclDateTime").isEqualTo(expected.getLclDateTime()))
            .satisfies(a -> assertThat(a.getNumSiege()).as("check numSiege").isEqualTo(expected.getNumSiege()))
            .satisfies(a -> assertThat(a.getNiveauPrix()).as("check niveauPrix").isEqualTo(expected.getNiveauPrix()))
            .satisfies(a -> assertThat(a.getTotalAffiche()).as("check totalAffiche").isEqualTo(expected.getTotalAffiche()))
            .satisfies(a -> assertThat(a.getQuantiteAffiche()).as("check quantiteAffiche").isEqualTo(expected.getQuantiteAffiche()))
            .satisfies(a -> assertThat(a.getEstErreur()).as("check estErreur").isEqualTo(expected.getEstErreur()))
            .satisfies(a -> assertThat(a.getEstNul()).as("check estNul").isEqualTo(expected.getEstNul()))
            .satisfies(a -> assertThat(a.getEstRetourne()).as("check estRetourne").isEqualTo(expected.getEstRetourne()))
            .satisfies(a -> assertThat(a.getEstInvisible()).as("check estInvisible").isEqualTo(expected.getEstInvisible()))
            .satisfies(a -> assertThat(a.getTotalLigne()).as("check totalLigne").isEqualTo(expected.getTotalLigne()))
            .satisfies(a -> assertThat(a.getCodeRaisonRef()).as("check codeRaisonRef").isEqualTo(expected.getCodeRaisonRef()))
            .satisfies(a -> assertThat(a.getMultiplicateur()).as("check multiplicateur").isEqualTo(expected.getMultiplicateur()))
            .satisfies(a -> assertThat(a.getReferenceInfo()).as("check referenceInfo").isEqualTo(expected.getReferenceInfo()))
            .satisfies(a -> assertThat(a.getReferenceInfo2()).as("check referenceInfo2").isEqualTo(expected.getReferenceInfo2()))
            .satisfies(a -> assertThat(a.getPartieDeJourneeRef()).as("check partieDeJourneeRef").isEqualTo(expected.getPartieDeJourneeRef())
            )
            .satisfies(a ->
                assertThat(a.getPeriodeDeServiceRef()).as("check periodeDeServiceRef").isEqualTo(expected.getPeriodeDeServiceRef())
            )
            .satisfies(a -> assertThat(a.getNumChrono()).as("check numChrono").isEqualTo(expected.getNumChrono()))
            .satisfies(a ->
                assertThat(a.getParentFactureDetailRef()).as("check parentFactureDetailRef").isEqualTo(expected.getParentFactureDetailRef())
            )
            .satisfies(a -> assertThat(a.getTaxePourcentage()).as("check taxePourcentage").isEqualTo(expected.getTaxePourcentage()))
            .satisfies(a -> assertThat(a.getTaxeMontant()).as("check taxeMontant").isEqualTo(expected.getTaxeMontant()))
            .satisfies(a -> assertThat(a.getModePaiementTotal()).as("check modePaiementTotal").isEqualTo(expected.getModePaiementTotal()))
            .satisfies(a -> assertThat(a.getPrix()).as("check prix").isEqualTo(expected.getPrix()))
            .satisfies(a ->
                assertThat(a.getTransactionEmployeRef()).as("check transactionEmployeRef").isEqualTo(expected.getTransactionEmployeRef())
            )
            .satisfies(a ->
                assertThat(a.getTransfertEmployeRef()).as("check transfertEmployeRef").isEqualTo(expected.getTransfertEmployeRef())
            )
            .satisfies(a -> assertThat(a.getManagerEmployeRef()).as("check managerEmployeRef").isEqualTo(expected.getManagerEmployeRef()))
            .satisfies(a -> assertThat(a.getRepasEmployeRef()).as("check repasEmployeRef").isEqualTo(expected.getRepasEmployeRef()))
            .satisfies(a -> assertThat(a.getRemiseRef()).as("check remiseRef").isEqualTo(expected.getRemiseRef()))
            .satisfies(a ->
                assertThat(a.getRemiseElementMenuRef()).as("check remiseElementMenuRef").isEqualTo(expected.getRemiseElementMenuRef())
            )
            .satisfies(a ->
                assertThat(a.getCommissionServiceRef()).as("check commissionServiceRef").isEqualTo(expected.getCommissionServiceRef())
            )
            .satisfies(a -> assertThat(a.getModePaiementRef()).as("check modePaiementRef").isEqualTo(expected.getModePaiementRef()))
            .satisfies(a -> assertThat(a.getElementMenuRef()).as("check elementMenuRef").isEqualTo(expected.getElementMenuRef()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactureDetailUpdatableRelationshipsEquals(FactureDetail expected, FactureDetail actual) {
        // empty method
    }
}
